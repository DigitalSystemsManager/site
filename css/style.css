// js/script.js

// Função para carregar componentes HTML dinamicamente em um container específico
async function loadComponent(containerId, componentPath) {
    try {
        const response = await fetch(componentPath);
        if (!response.ok) {
            throw new Error(`Erro ao carregar o componente ${componentPath}: ${response.status} ${response.statusText}`);
        }
        const html = await response.text();
        document.getElementById(containerId).innerHTML = html;
        console.log(`Componente ${componentPath} carregado com sucesso em #${containerId}.`);

        // Após carregar o menu, ajusta o padding-top do body.
        if (containerId === 'menu-container') {
            adjustBodyPadding();
            window.addEventListener('resize', adjustBodyPadding);
        }

        // NOVO: Chama a função para processar links de âncora após um componente ser carregado.
        // Isso é crucial para que os botões funcionem corretamente quando apontam para #ids que são injetados.
        processAnchorLinks();

    } catch (error) {
        console.error(`Falha crítica ao carregar componente ${componentPath}:`, error); // Log mais detalhado
        const container = document.getElementById(containerId);
        if (container) {
            container.innerHTML = `<p style="color: red; text-align: center; padding: 20px;">
                Erro ao carregar o conteúdo da seção ${containerId}. (Arquivo: ${componentPath}). Verifique os caminhos e arquivos.
            </p>`;
        }
    }
}

// Função para ajustar o padding-top do body, dinamicamente baseando-se na altura do cabeçalho
function adjustBodyPadding() {
    const menuContainer = document.getElementById('menu-container');
    if (menuContainer && menuContainer.firstElementChild) {
        const headerHeight = menuContainer.firstElementChild.offsetHeight;
        document.body.style.paddingTop = `${headerHeight}px`;
    }
}

// NOVO: Função para forçar a navegação para a âncora #chamada-final
function smoothScrollToAnchor(anchorId) {
    const targetElement = document.getElementById(anchorId);
    if (targetElement) {
        // Usa setTimeout para garantir que a rolagem aconteça DEPOIS
        // que o navegador teve tempo de renderizar o elemento injetado.
        setTimeout(() => {
            targetElement.scrollIntoView({ behavior: 'smooth' });
            // Atualiza a URL para refletir a âncora, sem forçar um recarregamento da página.
            history.pushState(null, null, `#${anchorId}`);
            console.log(`Rolando para o ID: #${anchorId}`);
        }, 100); // Pequeno atraso, mas suficiente para o DOM renderizar.
    } else {
        console.warn(`Elemento com ID '${anchorId}' não encontrado para rolagem.`);
    }
}

// NOVO: Função para gerenciar os cliques nos links de âncora
function processAnchorLinks() {
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        // Remove listener anterior para evitar duplicidade
        anchor.removeEventListener('click', handleAnchorClick);
        anchor.addEventListener('click', handleAnchorClick);
    });
}

// Handler de evento para links de âncora
function handleAnchorClick(e) {
    const href = this.getAttribute('href');
    // Verifica se o href aponta para '#chamada-final' ou outra âncora na mesma página
    if (href === '#chamada-final') {
        e.preventDefault(); // Impede o comportamento padrão do navegador
        smoothScrollToAnchor('chamada-final'); // Chama nossa função de rolagem
    } 
    // Se o href for para outro ID que não o #chamada-final e quiséssemos
    // também tratar (mas agora todos os CTAs internos levam pra #chamada-final)
    // else if (href.startsWith('#') && href !== '#') {
    //     e.preventDefault();
    //     const targetId = href.substring(1);
    //     smoothScrollToAnchor(targetId);
    // }
}


// --- INJEÇÃO PRINCIPAL DOS COMPONENTES NA PÁGINA ---
document.addEventListener('DOMContentLoaded', async () => {
    await loadComponent('menu-container', 'components/menu.html');
    await loadComponent('protecao-container', 'sections/protecao.html');
    await loadComponent('portfolio-container', 'sections/portfolio.html');
    await loadComponent('treinamentos-container', 'sections/treinamentos.html');

    // Inicializa a escuta para os links de âncora após todos os componentes terem chance de carregar.
    // Usamos o setTimeout para garantir que TUDO esteja no DOM antes de tentar attach listeners
    // e o processamento pode ocorrer.
    setTimeout(() => {
        processAnchorLinks();
        // Se a página já carrega com uma âncora na URL (ex: dominio.com/#chamada-final),
        // isso forçará a rolagem inicial corretamente.
        if (window.location.hash) {
            smoothScrollToAnchor(window.location.hash.substring(1));
        }
    }, 500); // Um atraso maior (0.5s) para dar tempo para TUDO renderizar.

    await loadComponent('footer-container', 'components/footer.html');
});
